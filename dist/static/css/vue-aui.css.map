{"version":3,"sources":["webpack://VueAui/./src/components/navigation/NavItem.vue","webpack://VueAui/./src/components/select2/Select2Single.vue","webpack://VueAui/./src/components/select2/Select2Multi.vue","webpack://VueAui/./src/components/Avatar.vue","webpack://VueAui/./src/components/Dialog.vue","webpack://VueAui/./src/components/Spinner.vue","webpack://VueAui/./src/components/InlineDialog.vue"],"names":[],"mappings":"AAqBA,mBACA,cACA,CAEA,gCACA,kBACA,CCQA,iFACA,aACA,CC0DA,6DACA,yBACA,CC1EA,uDACA,iBACA,CCgFA,iDACA,SACA,CAEA,sDAGA,0BADA,iBADA,SAGA,CAEA,8DACA,wBACA,CAEA,gEACA,mBAEA,iBADA,qBAEA,CCnDA,uBAEA,qBADA,kBAEA,qBACA,CAEA,oCAEA,mBADA,iBAEA,CCLA,kFACA,YACA,CAEA,4FACA,gBACA,YACA,gBACA,gBACA,cACA,SACA","file":"static/css/vue-aui.css","sourcesContent":["<template>\n  <li :class=\"{'aui-nav-selected': this.selected}\" @click=\"$emit('click')\">\n    <a :href=\"href\">\n      <va-icon class=\"nav-item-icon\" v-if=\"icon\">{{ icon }}</va-icon>\n      {{name}}\n    </a>\n  </li>\n</template>\n\n<script>\n  export default {\n    props: {\n      name: String,\n      href: String,\n      selected: Boolean,\n      icon: String\n    }\n  }\n</script>\n\n<style scoped>\n  a {\n    cursor: pointer;\n  }\n\n  .nav-item-icon {\n    padding-right: .5em;\n  }\n</style>\n","<template>\n    <span>\n        <input :disabled=\"disabled\" type=\"hidden\" ref=\"input\">\n        <slot></slot>\n    </span>\n</template>\n\n<script>\n  import auiSelect2Mixin from './select2Mixin'\n\n  export default {\n    mixins: [auiSelect2Mixin],\n\n    props: {\n      allowClear: Boolean,\n      minimumResultsForSearch: Number,\n      value: [String, Number],\n    },\n\n    mounted() {\n      this.$input.val(this.value)\n\n      const options = {\n        ...this.commonOptions,\n        allowClear: this.allowClear,\n        data: () => ({results: this.options}),\n        minimumResultsForSearch: this.minimumResultsForSearch,\n      };\n\n      this.$input.auiSelect2(options);\n    }\n  }\n</script>\n\n<style>\n  .aui-select2-container.select2-container.select2-allowclear .select2-choice abbr {\n    display: block;\n  }\n</style>\n","<template>\n    <span class=\"vue-aui-multi-select2\">\n        <input :disabled=\"disabled\" type=\"hidden\" ref=\"input\">\n        <slot></slot>\n    </span>\n</template>\n\n<script>\n  import auiSelect2Mixin from './select2Mixin'\n\n  const SEPARATOR = ',';\n\n  export default {\n    mixins: [auiSelect2Mixin],\n\n    props: {\n      formatSelectionTooBig: Function,\n      maximumSelectionSize: Number,\n      sortable: Boolean,\n      tagsMode: Boolean,\n      value: Array,\n      locked: {type: Array, default: () => []}\n    },\n\n    watch: {\n      locked() {\n        this.updateValue()\n      },\n    },\n\n    created() {\n      this.$on('dataChanged', this.updateValue)\n    },\n\n    mounted() {\n      this.$input.val(this.value && this.value.join(SEPARATOR))\n\n      const options = {...this.commonOptions}\n\n      if (this.initSelection) {\n        options.initSelection = (element, callback) => {\n          const callbackWrapper = options => {\n            if (!options) {\n              callback(options)\n            } else {\n              callback(options.map(option => ({\n                ...option,\n                locked: option.locked || this.locked.indexOf(option.id) >= 0\n              })))\n            }\n          }\n\n          this.initSelection(element, callbackWrapper)\n        }\n      }\n\n      if (this.tagsMode) {\n        if (!options.formatNoMatches) {\n          options.formatNoMatches = () => \"Type to add a value\"\n        }\n        options.tags = () => this.options\n      } else {\n        options.multiple = true\n        options.data = () => ({results: this.options})\n      }\n\n      options.formatSelectionTooBig = this.formatSelectionTooBig\n      options.maximumSelectionSize = this.maximumSelectionSize\n\n      this.$input.auiSelect2(options)\n\n      if (this.sortable) {\n        this.setupSorting();\n      }\n    },\n\n    methods: {\n      setupSorting() {\n        if (!AJS.$.fn.sortable) {\n          console.warn(\"jQuery sortable not available, skipping sortable option.\");\n          return;\n        }\n\n        this.$input.prev('div').find('.select2-choices').sortable({\n          containment: 'parent',\n          start: () => this.$input.auiSelect2(\"onSortStart\"),\n          update: () => this.$input.auiSelect2(\"onSortEnd\")\n        });\n      }\n    }\n  }\n</script>\n\n<style>\n  /* Override AUI too high locked items*/\n  .vue-aui-multi-select2 .select2-search-choice.select2-locked {\n    padding: 1px 5px !important;\n  }\n</style>\n","<template>\n  <span :class=\"['aui-avatar', 'aui-avatar-' + size, this.squared ? 'aui-avatar-squared' : '']\">\n    <span class=\"aui-avatar-inner\"><img :src=\"src\"></span>\n  </span>\n</template>\n\n<script>\n  export default {\n    props: {\n      size: {\n        type: String,\n        default: 'medium'\n      },\n      squared: Boolean,\n      src: {\n        type: String,\n        required: true,\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .aui-avatar-squared .aui-avatar-inner {\n    border-radius: 3px;\n  }\n</style>\n","<template>\n  <section role=\"dialog\" :style=\"{ width: width, 'max-width': maxWidth }\" :class=\"classObject\">\n    <header class=\"aui-dialog2-header\">\n      <h2 class=\"aui-dialog2-header-main\">\n        {{ title }}\n      </h2>\n      <div class=\"dialog-header-actions\">\n        <slot name=\"header-actions\"></slot>\n      </div>\n\n      <a class=\"aui-dialog2-header-close\" @click.stop=\"closeDialogHandler\" v-show=\"showCloseButton\">\n        <span class=\"aui-icon aui-icon-small aui-iconfont-close-dialog\">Close</span>\n      </a>\n    </header>\n    <div class=\"aui-dialog2-content\" :class=\"{'no-padding': noPadding}\"\n         :style=\"{ height: height, 'max-height': maxHeight, }\">\n      <slot></slot>\n    </div>\n    <footer class=\"aui-dialog2-footer\">\n      <div class=\"aui-dialog2-footer-actions\">\n        <slot name=\"footer-actions\"></slot>\n        <button v-if=\"cancelButton\" class=\"aui-button aui-button-link\" @click=\"closeDialogHandler\">{{ cancelButton }}\n        </button>\n      </div>\n      <div class=\"aui-dialog2-footer-hint\">\n        <slot name=\"footer-hint\"></slot>\n      </div>\n    </footer>\n  </section>\n</template>\n\n<script>\n  export default {\n    props: {\n      cancelButton: String,\n      floating: Boolean,\n      height: String,\n      isVisible: {\n        type: Boolean,\n        default: true\n      },\n      maxHeight: String,\n      maxWidth: String,\n      noPadding: Boolean,\n      showCloseButton: Boolean,\n      size: {\n        type: String,\n        validator(value) {\n          return ['small', 'medium', 'large', 'xlarge'].indexOf(value) >= 0\n        },\n        default: 'medium'\n      },\n      title: String,\n      warning: Boolean,\n      width: String,\n    },\n\n    computed: {\n      classObject() {\n        const classObj = {\n          'aui-dialog2-warning': this.warning,\n          'aui-dialog2': true,\n        };\n        classObj[`aui-dialog2-${this.size}`] = true;\n        return classObj\n      }\n    },\n\n    watch: {\n      isVisible: {\n        immediate: true,\n        handler() {\n          if (!this.floating) return;\n          if (this.isVisible) {\n            this.$nextTick(() => AJS.dialog2(this.$el).show());\n          } else {\n            this.$nextTick(() => AJS.dialog2(this.$el).hide());\n          }\n        }\n      }\n    },\n\n    mounted() {\n      AJS.whenIType(\"Esc\").execute(() => {\n        if (this.$el.contains(document.activeElement)) {\n          this.closeDialogHandler()\n        }\n      });\n\n      if (this.floating) {\n        AJS.dialog2(this.$el).on(\"hide\", () => this.$emit(\"update:isVisible\", false));\n        AJS.dialog2(this.$el).on(\"show\", () => this.$emit(\"update:isVisible\", true));\n      }\n    },\n\n    methods: {\n      closeDialogHandler: function closeDialogHandler() {\n        this.$emit('onClose') // Deprecated, remove in 1.0\n        this.$emit('close')\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .aui-dialog2-content.no-padding {\n    padding: 0;\n  }\n\n  [data-aui-version^=\"6\"] .aui-dialog2 {\n    top: 109px;\n    max-width: 1200px;\n    height: calc(100% - 120px);\n  }\n\n  [data-aui-version^=\"6\"] .aui-dialog2-content {\n    height: calc(100% - 70px);\n  }\n\n  [data-aui-version^=\"6\"] .dialog-header-actions {\n    display: table-cell;\n    vertical-align: middle;\n    text-align: right;\n  }\n</style>\n","<template>\n  <span class=\"aui-spinner-container\" :style=\"containerSize\"></span>\n</template>\n\n<script>\n  export default {\n    props: {\n      spin: {type: Boolean, default: true},\n      radius: {type: Number, default: 3},\n      width: {type: Number, default: 2},\n      length: {type: Number, default: 3},\n      color: String\n    },\n\n    computed: {\n      spinnerOptions() {\n        return {\n          className: 'aui-spinner',\n          position: 'absolute',\n          color: this.color,\n          radius: this.radius,\n          width: this.width,\n          length: this.length,\n        }\n      },\n\n      containerSize() {\n        const size = (this.radius + this.length + this.width) * 2;\n        return {\n          height: `${size}px`,\n          width: `${size}px`,\n        }\n      }\n    },\n\n    mounted() {\n      if (this.spin) {\n        this.start();\n      } else {\n        this.stop()\n      }\n    },\n\n    watch: {\n      spin(newVal) {\n        if (newVal) {\n          this.start();\n        } else {\n          this.stop();\n        }\n      },\n\n      spinnerOptions() {\n        if (this.spin) {\n          this.start();\n        }\n      }\n    },\n\n    methods: {\n      start() {\n        AJS.$(this.$el).spin(this.spinnerOptions);\n      },\n\n      stop() {\n        AJS.$(this.$el).spinStop();\n      }\n    }\n  }\n</script>\n\n<style>\n  .aui-spinner-container {\n    position: relative;\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .aui-spinner-container .aui-spinner {\n    top: 50% !important;\n    left: 50% !important;\n  }\n</style>\n","<script>\n  import {createUniqueId} from '../utils'\n\n  export default {\n    data() {\n      return {\n        id: createUniqueId('aui-inline-dialog')\n      };\n    },\n\n    props: {\n      open: Boolean,\n      persistent: Boolean,\n      alignment: String,\n      respondsTo: {\n        type: String,\n        default: 'toggle'\n      }\n    },\n\n    render(h) {\n      const triggerVnode = this.$slots.trigger[0];\n      this.injectAttributes(triggerVnode);\n\n      return h('span', [\n        this.$slots.trigger,\n        h('aui-inline-dialog', {\n          'class': {\n            'vue-inline-dialog': true\n          },\n          attrs: {\n            id: this.id,\n            open: this.open,\n            persistent: this.persistent,\n            alignment: this.alignment,\n            'responds-to': this.respondsTo !== 'none' ? this.respondsTo : null\n          },\n          ref: 'inlineDialogElement'\n        }, [\n          h('div', {\n            'class': {\n              'aui-inline-dialog-contents': true\n            }\n          }, this.$slots.dialog)\n        ])\n      ]);\n    },\n\n    methods: {\n      injectAttributes(vnode) {\n        vnode.data.attrs = {\n          ...vnode.data.attrs,\n          'href': `#${this.id}`,\n          'aria-controls': this.id,\n          'data-aui-trigger': this.respondsTo !== 'none'\n        };\n      }\n    },\n\n    mounted() {\n      this.$refs.inlineDialogElement.addEventListener('aui-hide', () => {\n        this.$emit('aui-hide'); // Deprecated, remove in 1.0\n        this.$emit('hide');\n        this.$emit(\"update:open\", false)\n      });\n      this.$refs.inlineDialogElement.addEventListener('aui-show', () => {\n        this.$emit('aui-show'); // Deprecated, remove in 1.0\n        this.$emit('show');\n        this.$emit(\"update:open\", true)\n      });\n    }\n  };\n</script>\n\n<style>\n  /* Fix for Chrome - elements are not added properly inside the wrapper */\n  aui-inline-dialog.vue-inline-dialog .aui-inline-dialog-contents:nth-last-child(2) {\n    display: none;\n  }\n\n  aui-inline-dialog.vue-inline-dialog .aui-inline-dialog-contents .aui-inline-dialog-contents {\n    background: none;\n    border: none;\n    border-radius: 0;\n    box-shadow: none;\n    overflow: auto;\n    padding: 0;\n  }\n</style>\n"],"sourceRoot":""}